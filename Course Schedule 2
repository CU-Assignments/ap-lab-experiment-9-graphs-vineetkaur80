class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        
        for (int[] prerequisite : prerequisites) {
            int course = prerequisite[0];
            int prereq = prerequisite[1];
            graph.get(prereq).add(course);
        }
        
        int[] visited = new int[numCourses]; // 0: unvisited, 1: visiting, 2: visited
        List<Integer> result = new ArrayList<>();
        
        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (!dfs(graph, visited, result, i)) {
                    return new int[0]; // Cycle detected
                }
            }
        }
        
        int[] order = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            order[i] = result.get(numCourses - 1 - i);
        }
        
        return order;
    }
    
    private boolean dfs(List<List<Integer>> graph, int[] visited, List<Integer> result, int course) {
        visited[course] = 1; 
        for (int nextCourse : graph.get(course)) {
            if (visited[nextCourse] == 1) {
                return false; 
            }
            if (visited[nextCourse] == 0) {
                if (!dfs(graph, visited, result, nextCourse)) {
                    return false;
                }
            }
        }
        
        visited[course] = 2; 
        result.add(course); 
        return true;
    }
}

